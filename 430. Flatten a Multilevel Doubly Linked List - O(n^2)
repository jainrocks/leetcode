/*
// Definition for a Node.
class Node {
    public int val;
    public Node prev;
    public Node next;
    public Node child;

    public Node() {}

    public Node(int _val,Node _prev,Node _next,Node _child) {
        val = _val;
        prev = _prev;
        next = _next;
        child = _child;
    }
};
*/
class Solution {
    public Node flatten(Node head) {
        Node node = head;
        if (node == null) {
            return node;
        }
        while (node != null) {
            while (node != null && node.child == null) {
                node = node.next;
            } 
            if (node != null && node.child != null) {
                Node temp = node.next;
                Node temp2 = flatten(node.child);
                Node temp3 = temp2;
                while (temp3 != null && temp3.next != null) {
                    temp3 = temp3.next;
                }
                node.next = temp2;
                node.child = null;
                temp2.prev = node;
                temp3.next = temp;
                if (temp != null) {
                    temp.prev = temp3;
                }
                node = temp;
            }
        }
            
        return head;
    }
}
